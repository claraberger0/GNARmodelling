exp_costs <- function(hist.log, mins){
# Take the log of all the data adding constant based on the values of each node
hist.output <- as.data.frame(mapply(function(x,y){exp(x) - 1.01*abs(y)}, hist.log, mins))
}
test2 <- exp_costs(hist.conglog, mins)
View(test2)
log(hist.cong[90:95,7] + 1.01*abs(min(hist.cong[,7])))
exp(hist.conglog[90:95,7]) - 1.01*abs(min(hist.cong[,7]))
hist.cong[90:95,7]
test2[90:95,7]
### unlog data
unlog <- exp_costs(fit, mins)
View(unlog)
class(unlog)
# Undifferenced logged costs
plot(sort(conglog.ts[y2019,min.rmse], decreasing = TRUE), type='l',  ylab = "Log Congestion Costss")
lines(sort(rebuilt[y2019,min.rmse], decreasing = TRUE), type='l',  col="red")
# Add a legend
legend("topright", legend = c("Actual", "Predicted"), col = c("black", "red"), lwd = 2)
title(paste("Best fit Costs at",rmses[[2]]$Node[min.rmse],"in 2019"))
# Unlogged and Undifferenced
plot(sort(hist.cong[y2019,min.rmse], decreasing = TRUE), type='l',  ylab = "Congestion Costss")
lines(sort(unlog[y2019,min.rmse], decreasing = TRUE), type='l',  col="red")
# Add a legend
legend("topright", legend = c("Actual", "Predicted"), col = c("black", "red"), lwd = 2)
title(paste("Best fit Costs at",rmses[[2]]$Node[min.rmse],"in 2019"))
hist.cong[y2019,min.rmse]
length(na.omit(hist.cong[y2019,min.rmse]))
length(na.omit(conglog.ts[y2019,min.rmse]))
average_cong_costs <- function(hist.input, matches.aur, matches.gis){
# Only keep the columns of Aurora nodes that had a match in the GIS data
hist.input <- hist.input %>%
mutate_at(vars(-timeutcminus6), as.numeric) %>%
select_if(names(.) %in% matches.aur)
# Use recode() to rename the column names with the names of the corresponding GIS nodes
#this will cause multiple columns with the same name if multiple Aurora points were at the same location
colnames(hist.input) <- recode(colnames(hist.input), !!!setNames(matches.gis, matches.aur))
# For all columns with duplicate names, take the average of the congestion costs
hist.avg <- as.data.frame(
sapply(unique(names(hist.input)), # for each unique column name
function(col) rowMeans(hist.input[names(hist.input) == col], na.rm = TRUE) # calculate row means
))
return(hist.avg)
}
hist.cong <- average_cong_costs(hist.congraw, matches.aur=matched$NODE_ID_left, matches.gis=matched$NODE_ID_right)
length(na.omit(hist.cong[y2019,min.rmse]))
length(na.omit(conglog.ts[y2019,min.rmse]))
View(unlog)
### unlog data
unlog <- exp_costs(fit, mins)
hist.cong[90:95,7]
hist.cong[90:95,7]
test[90:95,7]
test2[90:95,7]
fit
class(fit)
test <- log_costs(hist.cong, mins)
test2 <- log_costs(test, mins)
class(test)
hist.cong[90:95,7]
test[90:95,7]
test2[90:95,7]
test2 <- exp_costs(test, mins)
test2[90:95,7]
class(unlog)
class(fit)
### unlog data
unlog <- exp_costs(fit, mins)
### unlog data
unlog <- exp_costs(as.data.frame(fit), mins)
class(fit)
length(na.omit(conglog.ts[y2019,min.rmse]))
# Unlogged and Undifferenced
plot(sort(hist.cong[y2019,min.rmse], decreasing = TRUE), type='l',  ylab = "Congestion Costss")
lines(sort(unlog[y2019,min.rmse], decreasing = TRUE), type='l',  col="red")
# Add a legend
legend("topright", legend = c("Actual", "Predicted"), col = c("black", "red"), lwd = 2)
title(paste("Best fit Costs at",rmses[[2]]$Node[min.rmse],"in 2019"))
length(na.omit(unlog[y2019,min.rmse]))
unlog[y2019,min.rmse]
# Undifferenced logged costs
plot(sort(conglog.ts[y2019,min.rmse], decreasing = TRUE), type='l',  ylab = "Log Congestion Costss")
lines(sort(rebuilt[y2019,min.rmse], decreasing = TRUE), type='l',  col="red")
# Add a legend
legend("topright", legend = c("Actual", "Predicted"), col = c("black", "red"), lwd = 2)
title(paste("Best fit Costs at",rmses[[2]]$Node[min.rmse],"in 2019"))
### unlog data
unlog <- exp_costs(as.data.frame(conglog.ts), mins)
### unlog data
unlog <- exp_costs(as.data.frame(hist.conglog), mins)
### unlog data
unlog <- exp_costs(as.data.frame(fit), mins)
# we can isolate one node to see how the fit looks through time
plot(diff1log[,1], ylab = "Node 1 Differenced Time Series", ylim=c(-0.1,0.1))
lines(fit[, 1], col = 2)
# Undifferenced logged costs
plot(sort(conglog.ts[y2019,min.rmse], decreasing = TRUE), type='l',  ylab = "Log Congestion Costss")
lines(sort(rebuilt[y2019,min.rmse], decreasing = TRUE), type='l',  col="red")
# Add a legend
legend("topright", legend = c("Actual", "Predicted"), col = c("black", "red"), lwd = 2)
title(paste("Best fit Costs at",rmses[[2]]$Node[min.rmse],"in 2019"))
# Undifferenced logged costs
plot(sort(conglog.ts[y2019,min.rmse], decreasing = TRUE), type='l',  ylab = "Log Congestion Costs", ylim=c(8.99,9))
lines(sort(rebuilt[y2019,min.rmse], decreasing = TRUE), type='l',  col="red")
# Add a legend
legend("topright", legend = c("Actual", "Predicted"), col = c("black", "red"), lwd = 2)
title(paste("Best fit Costs at",rmses[[2]]$Node[min.rmse],"in 2019"))
plot(sort(conglog.ts[y2016,min.rmse], decreasing = TRUE), type='l',  ylab = "Log Congestion Costs", ylim=c(8.99,9))
lines(sort(rebuilt[y2016,min.rmse], decreasing = TRUE), type='l',  col="red")
# Add a legend
legend("topright", legend = c("Actual", "Predicted"), col = c("black", "red"), lwd = 2)
title(paste("Best fit Costs at",rmses[[2]]$Node[min.rmse],"in 2019"))
plot(sort(conglog.ts[y2017,min.rmse], decreasing = TRUE), type='l',  ylab = "Log Congestion Costs", ylim=c(8.99,9))
lines(sort(rebuilt[y2017,min.rmse], decreasing = TRUE), type='l',  col="red")
# Add a legend
legend("topright", legend = c("Actual", "Predicted"), col = c("black", "red"), lwd = 2)
title(paste("Best fit Costs at",rmses[[2]]$Node[min.rmse],"in 2019"))
# Undifferenced logged costs
plot(sort(conglog.ts[y2020,min.rmse], decreasing = TRUE), type='l',  ylab = "Log Congestion Costs", ylim=c(8.99,9))
lines(sort(rebuilt[y2020,min.rmse], decreasing = TRUE), type='l',  col="red")
# Add a legend
legend("topright", legend = c("Actual", "Predicted"), col = c("black", "red"), lwd = 2)
title(paste("Best fit Costs at",rmses[[2]]$Node[min.rmse],"in 2019"))
# Undifferenced logged costs
plot(sort(conglog.ts[y2019,min.rmse], decreasing = TRUE), type='l',  ylab = "Log Congestion Costs", ylim=c(8.99,9))
lines(sort(rebuilt[y2019,min.rmse], decreasing = TRUE), type='l',  col="red")
# Add a legend
legend("topright", legend = c("Actual", "Predicted"), col = c("black", "red"), lwd = 2)
title(paste("Best fit Costs at",rmses[[2]]$Node[min.rmse],"in 2019"))
# Undifferenced logged costs
plot(sort(conglog.ts[y2017,min.rmse], decreasing = TRUE), type='l',  ylab = "Log Congestion Costs", ylim=c(8.99,9))
lines(sort(rebuilt[y2017,min.rmse], decreasing = TRUE), type='l',  col="red")
# Add a legend
legend("topright", legend = c("Actual", "Predicted"), col = c("black", "red"), lwd = 2)
title(paste("Best fit Costs at",rmses[[2]]$Node[min.rmse],"in 2019"))
# Undifferenced logged costs
plot(sort(conglog.ts[y2017,min.rmse], decreasing = TRUE), type='l',  ylab = "Log Congestion Costs", ylim=c(8.99,9))
lines(sort(rebuilt[y2017,min.rmse], decreasing = TRUE), type='l',  col="red")
# Add a legend
legend("topright", legend = c("Actual", "Predicted"), col = c("black", "red"), lwd = 2)
title(paste("Best fit Costs at",rmses[[2]]$Node[min.rmse],"in 2019"))
dev.off()
plot(sort(conglog.ts[y2018,min.rmse], decreasing = TRUE), type='l',  ylab = "Log Congestion Costs", ylim=c(8.99,9))
lines(sort(rebuilt[y2018,min.rmse], decreasing = TRUE), type='l',  col="red")
# Add a legend
legend("topright", legend = c("Actual", "Predicted"), col = c("black", "red"), lwd = 2)
title(paste("Best fit Costs at",rmses[[2]]$Node[min.rmse],"in 2018"))
dev.off()
# Undifferenced logged costs
plot(sort(conglog.ts[y2018,min.rmse], decreasing = TRUE), type='l',  ylab = "Log Congestion Costs", ylim=c(8.99,9))
lines(sort(rebuilt[y2018,min.rmse], decreasing = TRUE), type='l',  col="red")
# Add a legend
legend("topright", legend = c("Actual", "Predicted"), col = c("black", "red"), lwd = 2)
title(paste("Best fit Costs at",rmses[[2]]$Node[min.rmse],"in 2018"))
# Undifferenced logged costs
plot(sort(conglog.ts[y2019,min.rmse], decreasing = TRUE), type='l',  ylab = "Log Congestion Costs", ylim=c(8.99,9))
lines(sort(rebuilt[y2019,min.rmse], decreasing = TRUE), type='l',  col="red")
# Add a legend
legend("topright", legend = c("Actual", "Predicted"), col = c("black", "red"), lwd = 2)
title(paste("Best fit Costs at",rmses[[2]]$Node[min.rmse],"in 2019"))
# Undifferenced logged costs
plot(sort(conglog.ts[y2021,min.rmse], decreasing = TRUE), type='l',  ylab = "Log Congestion Costs", ylim=c(8.99,9))
lines(sort(rebuilt[y2021,min.rmse], decreasing = TRUE), type='l',  col="red")
# Add a legend
legend("topright", legend = c("Actual", "Predicted"), col = c("black", "red"), lwd = 2)
title(paste("Best fit Costs at",rmses[[2]]$Node[min.rmse],"in 2019"))
# Undifferenced logged costs
plot(sort(conglog.ts[y2021,min.rmse], decreasing = TRUE), type='l',  ylab = "Log Congestion Costs", ylim=c(8.99,9))
lines(sort(rebuilt[y2021,min.rmse], decreasing = TRUE), type='l',  col="red")
# Add a legend
legend("topright", legend = c("Actual", "Predicted"), col = c("black", "red"), lwd = 2)
title(paste("Best fit Costs at",rmses[[2]]$Node[min.rmse],"in 2021"))
# Undifferenced logged costs
plot(sort(conglog.ts[y2021,min.rmse], decreasing = TRUE), type='l',  ylab = "Log Congestion Costs", ylim=c(8.994,9))
lines(sort(rebuilt[y2021,min.rmse], decreasing = TRUE), type='l',  col="red")
# Add a legend
legend("topright", legend = c("Actual", "Predicted"), col = c("black", "red"), lwd = 2)
title(paste("Best fit Costs at",rmses[[2]]$Node[min.rmse],"in 2021"))
xiv
xiv <- t(na.omit(conglog.ts)[1,]) #vectors are dimensionless so use t() to make a 1D array
sapply(conglog.ts, function(x) na.omit(x)[1])
sapply(as.data.frame(conglog.ts), function(x) na.omit(x)[1])
xiv <- t(na.omit(as.data.frame(conglog.ts))[1,]) #vectors are dimensionless so use t() to make a 1D array
xiv
na.omit(as.data.frame(conglog.ts))
as.data.frame(conglog.ts)
xiv <- t(conglog.ts[1,]) #vectors are dimensionless so use t() to make a 1D array
xiv[1:10]
xiv <- t(sapply(as.data.frame(conglog.ts), function(x) na.omit(x)[1])) #vectors are dimensionless so use t() to make a 1D array
xiv[1:10]
rebuilt <- diffinv(fit, xi=xiv)
rmses <- calculate_rmse(conglog.ts, rebuilt)
min.rmse <- which.min(rmses[[2]]$RMSE)
max.rmse <- which.max(rmses[[2]]$RMSE)
max.rmse
# Undifferenced logged costs
plot(sort(conglog.ts[y2021,max.rmse], decreasing = TRUE), type='l',  ylab = "Log Congestion Costs", ylim=c(8.994,9))
# Undifferenced logged costs
plot(sort(conglog.ts[y2021,max.rmse], decreasing = TRUE), type='l',  ylab = "Log Congestion Costs")
rmses
max.rmse
hist.cong[,"STATION4265"]
na.omit(hist.cong[,"STATION4265"])
length(na.omit(hist.cong[,"STATION4265"])
length(na.omit(hist.cong[,"STATION4265"]))
length(na.omit(hist.cong[,"STATION4265"]))
# Undifferenced logged costs
plot(sort(conglog.ts[y2016,max.rmse], decreasing = TRUE), type='l',  ylab = "Log Congestion Costs")
length(na.omit(hist.cong[y2016,"STATION4265"]))
length(na.omit(hist.cong[y2017,"STATION4265"]))
length(na.omit(hist.cong[y2018,"STATION4265"]))
length(na.omit(hist.cong[y2019,"STATION4265"]))
length(na.omit(hist.cong[y2020,"STATION4265"]))
length(na.omit(hist.cong[y2021,"STATION4265"]))
length(na.omit(hist.cong[y2022,"STATION4265"]))
# Undifferenced logged costs
plot(sort(conglog.ts[y2022,max.rmse], decreasing = TRUE), type='l',  ylab = "Log Congestion Costs")
lines(sort(rebuilt[y2022,max.rmse], decreasing = TRUE), type='l',  col="red")
rebuilt <- diffinv(fit, xi=xiv)
length(na.omit(rebuilt[y2022,"STATION4265"]))
length(na.omit(rebuilt[,"STATION4265"]))
length(na.omit(rebuilt[,274]))
diff1log[,274]
View(diff1log)
View(rebuilt)
rebuilt <- diffinv(na.omit(fit), xi=xiv)
View(rebuilt)
rebuilt <- data.frame(sapply(fit, function(x) diffinv(na.omit(x), xi=xiv)))
rebuilt <- data.frame(mapply(function(x,y) diffinv(na.omit(x), xi=y), fit, xiv))
class(fit)
rebuilt <- data.frame(mapply(function(x,y) diffinv(na.omit(x), xi=y), as.data.frame(fit), xiv))
dim(fit)
dim(xiv)
# initial values
xiv <- t(sapply(as.data.frame(conglog.ts), function(x) na.omit(x)[1])) #vectors are dimensionless so use t() to make a 1D array
rebuilt <- data.frame(mapply(function(x,y)  print(class(x)), fit, xiv))
rebuilt <- data.frame(mapply(function(x,y)  print(head(x)), fit, xiv))
rebuilt <- data.frame(mapply(function(x,y)  print(length(x)), fit, xiv))
rebuilt <- data.frame(mapply(function(x,y)  print(x[1:5]), fit, xiv))
rebuilt <- data.frame(mapply(function(x,y)  print(x[1:5]), fit, xiv))
rebuilt <- data.frame(mapply(function(x,y)  print(length(x),length(y)), fit, xiv))
rebuilt <- data.frame(mapply(function(x,y)  print(length(x)+length(y)), fit, xiv))
rebuilt <- data.frame(mapply(function(x,y)  print(length(x)+length(y)), as.matrix(fit), xiv))
?mapply
class(fit)
class(hist.cong)
rebuilt <- data.frame(mapply(function(x,y)  print(length(x)+length(y)), as.data.frame(fit), xiv))
rebuilt <- data.frame(mapply(function(x,y)  print(class(x)), as.data.frame(fit), xiv))
rebuilt <- data.frame(mapply(function(x,y)  diffinv(na.omit(x), xi=y), as.data.frame(fit), xiv))
rebuilt <- data.frame(mapply(function(x,y){print(length(x)), diffinv(na.omit(x), xi=y)}, as.data.frame(fit), xiv))
rebuilt <- data.frame(mapply(function(x,y){print(length(x)) diffinv(na.omit(x), xi=y)}, as.data.frame(fit), xiv))
rebuilt <- data.frame(mapply(function(x,y) diffinv(x, xi=y), as.data.frame(fit), xiv))
View(rebuilt)
rebuilt <- data.frame(mapply(function(x,y) diffinv(x, xi=y), as.data.frame(fit), xiv), SIMPLIFY=FALSE)
rebuilt
rebuilt <- data.frame(mapply(function(x,y) diffinv(na.omit(x), xi=y), as.data.frame(fit), xiv), SIMPLIFY=FALSE)
rebuilt <- data.frame(mapply(function(x,y) diffinv(na.omit(c(x)), xi=y), as.data.frame(fit), xiv))
rebuilt <- data.frame(mapply(function(x,y) diffinv(na.omit(t(x)), xi=y), as.data.frame(fit), xiv))
rebuilt <- data.frame(mapply(function(x,y) diffinv(na.omit(as.vector(x)), xi=y), as.data.frame(fit), xiv))
rebuilt <- data.frame(mapply(function(x,y) diffinv(na.omit(as.matrix(x)), xi=y), as.data.frame(fit), xiv))
dim(xiv)
xi[,1]
xiv[,1]
rebuilt <- data.frame(mapply(function(x,y) diffinv(na.omit(as.matrix(x)), xi=y), as.data.frame(fit), as.vector(xiv)))
rebuilt <- data.frame(mapply(function(x,y) diffinv(na.omit(as.matrix(x)), xi=y), as.data.frame(fit), as.matrix(xiv)))
rebuilt <- sapply(fit, function(x) diffinv(na.omit(x)))
rebuilt <- data.frame(mapply(function(x,y) class(x), as.data.frame(fit), as.matrix(xiv)))
rebuilt
lapply(1:ncol(fit), function(i) {diffinv(na.omit(fit[,i]), xi=xiv[,i])})
class(fit[,1])
fit[,1]
# Retrieve the fitted data
fit <- data.frame(fitted(resultlog))
# Retrieve the fitted data
fit <- data.frame(fitted(resultlog))
fit <- data.frame(fit)
class(fit[,1])
fit[,1
fit[,1]
fit[,1]
class(c(fit[,1]))
class(c(fit[,6]))
class(na.omit(fit[,6]))
na.omit(fit[,6])
diffinv(na.omit(fit[,6]), xi=xiv[,6])
diffinv(na.omit(fit[,6]), xi=xiv[,6])
na.omit(fit[,6])
class(na.omit(fit[,6]))
diffinv(na.omit(fit[,6]))
trial.matrix <- matrix(c(seq(3,13,by=2),rep(NA,3),10,12,14),ncol=2)
trial.matrix
xi <- apply(trial.matrix,2,function(cl) cl[which(!is.na(cl))[1]])
xi
z2 <- diff(trial.matrix)
# temporarily replace NAs in the second column by zeroes:
nas <- which(is.na(z2[,2]))
z2[nas,2] <- 0
new.df <- diffinv(z2,xi = t(xi))
new.df
# return NAs
new.df[nas,2] <- NA
nas <- which(is.na(fit))
nas
fit[nas] <- 0
fit[is.na(fit)] <- 0
View(fit)
rebuilt <- diffinv(fit, xi=xiv)
# Retrieve the fitted data
fit <- as.data.frame(fitted(resultlog))
test <- fit
test[is.na(test)] <- 0
rebuilt <- diffinv(fit, xi=xiv)
rebuilt <- diffinv(fit)
# initial values
xiv <- t(conglog.ts[,1])
rebuilt <- diffinv(fit, xiv)
# Retrieve the fitted data
fit <- fitted(resultlog)
# Retrieve the fitted data
fit <- fitted(resultlog)
#t(sapply(as.data.frame(conglog.ts), function(x) na.omit(x)[1])) #vectors are dimensionless so use t() to make a 1D array
test <- fit
# initial values
xiv <- t(conglog.ts[,1])
rebuilt <- diffinv(fit, xi=xiv)
dim(fit)
dim(xiv)
# initial values
xiv <- t(conglog.ts[1],)
rebuilt <- diffinv(fit, xi=xiv)
# initial values
xiv <- t(conglog.ts[1,])
dim(xiv)
rebuilt <- diffinv(fit, xi=xiv)
rmses <- calculate_rmse(conglog.ts, rebuilt)
min.rmse <- which.min(rmses[[2]]$RMSE)
max.rmse <- which.max(rmses[[2]]$RMSE)
###### best
# Undifferenced logged costs
plot(sort(conglog.ts[y2021,min.rmse], decreasing = TRUE), type='l',  ylab = "Log Congestion Costs", ylim=c(8.994,9))
lines(sort(rebuilt[y2021,min.rmse], decreasing = TRUE), type='l',  col="red")
# Add a legend
legend("topright", legend = c("Actual", "Predicted"), col = c("black", "red"), lwd = 2)
title(paste("Best fit Costs at",rmses[[2]]$Node[min.rmse],"in 2021"))
###### worst
# Undifferenced logged costs
plot(sort(conglog.ts[y2022,max.rmse], decreasing = TRUE), type='l',  ylab = "Log Congestion Costs")
lines(sort(rebuilt[y2022,max.rmse], decreasing = TRUE), type='l',  col="red")
# Undifferenced logged costs
plot(sort(conglog.ts[y2021,min.rmse], decreasing = TRUE), type='l',  ylab = "Log Congestion Costs", ylim=c(8.994,9))
lines(sort(rebuilt[y2021,min.rmse], decreasing = TRUE), type='l',  col="red")
# Add a legend
legend("topright", legend = c("Actual", "Predicted"), col = c("black", "red"), lwd = 2)
title(paste("Best fit Costs at",rmses[[2]]$Node[min.rmse],"in 2021"))
max.rmse
length(na.omit(rebuilt[,62]))
###### worst
# Undifferenced logged costs
plot(sort(conglog.ts[y2016,max.rmse], decreasing = TRUE), type='l',  ylab = "Log Congestion Costs")
lines(sort(rebuilt[y2016,max.rmse], decreasing = TRUE), type='l',  col="red")
# Add a legend
legend("topright", legend = c("Actual", "Predicted"), col = c("black", "red"), lwd = 2)
title(paste("Worst fit Costs at",rmses[[2]]$Node[max.rmse],"in 2016"))
?acf
# Look at ACF and PACF plots
acf(diff1log, lag.max = 40)
# Look at ACF and PACF plots
acf(diff1log[,1], lag.max = 40)
# Look at ACF and PACF plots
acf(diff1log[,52], lag.max = 40)
# Look at ACF and PACF plots
acf(cong.ts[,52], lag.max = 40)
# Look at ACF and PACF plots
acf(cong.ts[,1], lag.max = 40)
class(cong.ts)
class(diff1log)
# Look at ACF and PACF plots
acf(as.numeric(cong.ts[,1]), lag.max = 40)
par(mfrow = c(2, 1))
# Look at ACF and PACF plots
acf(as.numeric(cong.ts[,1]), lag.max = 40)
acf(as.numeric(diff1log[,1]), lag.max = 40)
acf(as.numeric(cong.ts[,30]), lag.max = 40)
acf(as.numeric(diff1log[,30]), lag.max = 40)
Box.test(diff1log, lag=40, type="Ljung-Box")
Box.test(diff1log[,1], lag=40, type="Ljung-Box")
Box.test(diff1log[,30], lag=40, type="Ljung-Box")
?Box.test
?diff
# To get stationarity take the first difference between each value
take_seasonal_diff <- function(ts.input){
# Take the first difference removing the time column
diff.ts <- ts(sapply(ts.input[, -ncol(ts.input)], function(x) diff(as.numeric(x),24)))
}
diff24log <- take_seasonal_diff(conglog.ts)
dim(cong.ts)
dim(cong.ts[,-time])
dim(cong.ts[,-c("time")])
dim(cong.ts[,!c("time")])
# We want each column to be a timeseries object
create_ts <- function(hist.input, times){
# Add back in a time variable
hist.input$time <- times
# Create time series object from each column of input
cong.xts <- xts(hist.input, order.by = times)
cong.ts <- ts(cong.xts)
cong.ts <- cong.ts[, -ncol(cong.ts)]
}
cong.ts <- create_ts(hist.cong, hist.congraw$timeutcminus6)
conglog.ts <- create_ts(hist.congclip, hist.congraw$timeutcminus6)
dim(conglog.ts)
# To get stationarity take the first difference between each value
take_first_diff <- function(ts.input){
# Take the first difference removing the time column
diff.ts <- ts(sapply(ts.input, function(x) diff(as.numeric(x),1,1)))
}
# To get stationarity take the first difference between each value
take_seasonal_diff <- function(ts.input){
# Take the first difference removing the time column
diff.ts <- ts(sapply(ts.input, function(x) diff(as.numeric(x),24)))
}
diff24log <- take_seasonal_diff(conglog.ts)
diff1log <- take_first_diff(diff24log)
par(mfrow = c(2, 1))
# Look at ACF and PACF plots
acf(as.numeric(cong.ts[,30]), lag.max = 40)
acf(as.numeric(diff1log[,30]), lag.max = 40)
exit()
Box.test(diff1log[,30], lag=40, type="Ljung-Box")
Box.test(diff24log[,30], lag=40, type="Ljung-Box")
acf(as.numeric(cong.ts[,30]), lag.max = 40)
acf(as.numeric(diff24log[,30]), lag.max = 40)
diff24log <- take_first_diff(take_seasonal_diff(conglog.ts))
diff1log <- take_first_diff(conglog.ts)
par(mfrow = c(3, 1))
# Look at ACF and PACF plots
acf(as.numeric(conglog.ts[,30]), lag.max = 40, title= "Log data")
acf(as.numeric(diff1log[,30]), lag.max = 40, title= "First differencing")
acf(as.numeric(diff24log[,30]), lag.max = 40)
# Set up the layout for two stacked subplots
par(mfrow = c(3, 1))
# Look at ACF and PACF plots
acf(as.numeric(conglog.ts[,30]), lag.max = 40, main= "Log data")
acf(as.numeric(diff1log[,30]), lag.max = 40, main= "First differencing")
acf(as.numeric(diff24log[,30]), lag.max = 40, main= "Seasonal then First differencing")
par(mfrow = c(3, 1))
# Look at ACF and PACF plots
acf(as.numeric(conglog.ts[,30]), lag.max = 40, main= "Log data")
acf(as.numeric(diff1log[,30]), lag.max = 40, main= "First differencing")
acf(as.numeric(diff24log[,30]), lag.max = 40, main= "Seasonal then first differencing")
# read in adjacency matrix of substations
adj.path <- paste0(wkdr,"grid_adj.csv")
adj<- read_csv(adj.path)
adj <- adj[, -1]    ## remove the first variable
# convert to matrix
adjm <- as.matrix(adj)
# make symmetric
# element-wise maximum between 'adj.matrix' and its transpose
make_symmetric <- function(matrix){
sym_mat <- pmax(matrix, t(matrix))
return(sym_mat)
}
adj.matrix <- make_symmetric(adjm)
# read in the node names and locations
nodes.path <- paste0(wkdr,"nodes.csv")
nodes<- read_csv(nodes.path)
# read in the node names and locations from Aurora
aurnodes.path <- paste0(wkdr,"aurnodes.csv")
aurnodes<- read_csv(aurnodes.path)
# convert adjacency matrix into a network
grid <- graph.adjacency(adj.matrix, mode="undirected", weighted=NULL)
plot(
grid,
vertex.size     = degree(grid)/3 + 1,  # set vertex size by the degree
edge.arrow.size = .25,
vertex.label = NA,
# layout = coords
)
is_connected(grid)
count_components(grid)
components(grid)
# we can isolate one node to see how the fit looks through time
plot(conglog.ts[,1], ylab = "Node 1 Undifferenced Time Series")
lines(rebuilt[, 1], col = 2)
par(mfrow = c(1, 1))
plot(conglog.ts[,1], ylab = "Node 1 Undifferenced Time Series")
lines(rebuilt[, 1], col = 2)
lines(rebuilt[, 1], col = 'red')
rebuilt[, 1]
plot(diff1log[,1], ylab = "Node 1 Differenced Time Series", ylim=c(-0.1,0.1))
lines(fit[, 1], col = "red")
diff1log <- take_first_diff(conglog.ts)
diff1log <- diff1log[, name.order]
# we can isolate one node to see how the fit looks through time
plot(diff1log[,1], ylab = "Node 1 Differenced Time Series", ylim=c(-0.1,0.1))
lines(fit[, 1], col = "red")
# we can isolate one node to see how the fit looks through time
plot(conglog.ts[,1], ylab = "Node 1 Undifferenced Time Series")
lines(rebuilt[, 1], col = 'red')
rebuilt[, 1]
plot(diff1log[,1], ylab = "Node 1 Differenced Time Series", ylim=c(-0.1,0.1))
lines(fit[, 1], col = "red")
# we can isolate one node to see how the fit looks through time
plot(diff1log[,1], ylab = "Node 1 Differenced Time Series", ylim=c(-0.1,0.1))
lines(fit[, 1], col = "red")
legend("topright", legend = c("Actual", "Predicted"), col = c("black", "red"), lwd = 2)
# we can isolate one node to see how the fit looks through time
plot(diff1log[,52], ylab = "Node 1 Differenced Time Series", ylim=c(-0.1,0.1))
lines(fit[, 52], col = "red")
# we can isolate one node to see how the fit looks through time
plot(diff1log[,52], ylab = "Node 1 Differenced Time Series")
lines(fit[, 52], col = "red")
